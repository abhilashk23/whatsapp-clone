{"version":3,"sources":["firebase.js","StateProvider.js","reducer.js","SidebarChat.js","constants.js","UseWindowDimensions.js","Sidebar.js","Chat.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["firebaseApp","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","db","firestore","provider","GoogleAuthProvider","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","actionTypes","state","action","type","user","localStorage","setItem","uid","displayName","photoURL","console","log","togglerState","SidebarChat","props","useState","setSeed","addNewChatVal","name","id","messages","setMessages","dispatch","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","Math","floor","random","to","onClick","className","Avatar","src","length","message","prompt","delete","then","window","location","catch","error","alert","roomName","add","timestamp","FieldValue","serverTimestamp","getWindowDimensions","width","innerWidth","height","innerHeight","UseWindowDimensions","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","Sidebar","rooms","setRooms","toggler","setToggler","sidebarBool","setsidebarBool","search","setSearch","input","setInput","setLogout","handleChange","e","target","exitApp","removeItem","reload","s","values","re","RegExp","toLowerCase","split","join","filter","v","match","matcher","unsubscribe","getItem","IconButton","color","aria-label","edge","style","placeholder","onChange","room","key","Chat","roomId","useParams","setRoomName","emoji","setEmoji","issendChecked","setIssendChecked","datewise","setDateWise","clientGMT","setClinetGMT","lastseenPhoto","setLastseen","hour","extramin","minutes","hourly","GMTminutes","String","slice","useSound","process","volume","playOn","playOff","addEmoji","native","checkEmojiClose","offset","Date","getTimezoneOffset","o","abs","getTimeZone","sendMessage","preventDefault","blankObj","TotalObj","blankArray","dateArray","forEach","i","messageDate","toDate","toUTCString","indexOf","push","index","messageData","messagesEndRef","useRef","scrollToBottom","current","scrollIntoView","behavior","handleDrawerToggle","item","Object","keys","parseInt","getDate","ref","onSelect","disabled","undefined","properties","fontWeight","Login","alt","Button","signInWithPopup","result","err","App","path","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ee3c9449.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n    apiKey: \"AIzaSyASORHgrL6nMSzgitSwPLy-Ax24n6HlCyE\",\n    authDomain: \"chatx-287c2.firebaseapp.com\",\n    projectId: \"chatx-287c2\",\n    storageBucket: \"chatx-287c2.appspot.com\",\n    messagingSenderId: \"977556542561\",\n    appId: \"1:977556542561:web:791ed1d8352691eadfc620\",\n    measurementId: \"G-YLFP716E87\"\n  };\n\n\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\n  const auth = firebase.auth();\n  const db = firebaseApp.firestore();\n  const provider = new firebase.auth.GoogleAuthProvider();\n\n\n  export { auth, provider };\n  export default db;","import React, { createContext, useContext, useReducer } from \"react\";\n\nexport const StateContext = createContext();\n\nexport const StateProvider = ({ reducer, initialState, children }) => (\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </StateContext.Provider>\n);\n\nexport const useStateValue = () => useContext(StateContext);\n","export const initialState = {\n  user: null,\n  uid: null,\n  togglerState: 1,\n  photoURL: \"\",\n};\n\nexport const actionTypes = {\n  SET_USER: \"SET_USER\",\n  SET_SESSION: \"SET_SESSION\",\n  SET_TOGGLER: \"SET_TOGGLER\",\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case actionTypes.SET_USER:\n      return {\n        ...state,\n        user: action.user,\n      };\n    case actionTypes.SET_SESSION:\n      localStorage.setItem(\"uid\", action.uid);\n      localStorage.setItem(\"displayName\", action.displayName);\n      localStorage.setItem(\"photoURL\", action.photoURL);\n      console.log(\"session added to storage\");\n      return {\n        ...state,\n        uid: action.uid,\n        displayName: action.displayName,\n        photoURL: action.photoURL,\n      };\n    case actionTypes.SET_TOGGLER:\n      return {\n        ...state,\n        togglerState: action.togglerState,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React, { useEffect, useState } from \"react\";\nimport { Avatar } from \"@material-ui/core\";\nimport \"./SidebarChat.css\";\nimport db from \"./firebase\";\nimport { Link } from \"react-router-dom\";\nimport { useStateValue } from \"./StateProvider\";\nimport { actionTypes } from \"./reducer\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport firebase from \"firebase\";\nimport { password } from \"./constants\";\nfunction SidebarChat(props) {\n  const [seed, setSeed] = useState(\"\");\n  const { addNewChatVal, name, id } = props;\n  const [messages, setMessages] = useState([]);\n  const [{ togglerState }, dispatch] = useStateValue();\n\n  useEffect(() => {\n    if (id) {\n      db.collection(\"rooms\")\n        .doc(id)\n        .collection(\"messages\")\n        .orderBy(\"timestamp\", \"desc\")\n        .onSnapshot((snapshot) =>\n          setMessages(snapshot.docs.map((doc) => doc.data()))\n        );\n    }\n  }, []);\n\n  useEffect(() => {\n    setSeed(Math.floor(Math.random() * 5000));\n  }, []);\n  const deleteRoom = () => {\n    const passwordVerify = prompt(\"Enter Admin Password to delete Room\");\n    if (passwordVerify == password) {\n      db.collection(\"rooms\")\n        .doc(id)\n        .delete()\n        .then(function () {\n          window.location = \"/\";\n        })\n        .catch(function (error) {\n          console.error(\"Error removing document: \", error);\n        });\n    } else {\n      alert(\"You are not authorised to delete rooms\");\n    }\n  };\n\n  const createChat = () => {\n    const roomName = prompt(\"Please enter name for chat\");\n    if (roomName && roomName.length >= 20) {\n      return alert(\"enter a shorter name for the room\");\n    }\n    if (roomName) {\n      db.collection(\"rooms\").add({\n        name: roomName,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      });\n    }\n  };\n\n  const handleChat = () => {\n    dispatch({\n      type: actionTypes.SET_TOGGLER,\n      togglerState: togglerState + 1,\n    });\n  };\n\n  return addNewChatVal !== \"true\" ? (\n    <Link to={`/rooms/${id}`} onClick={handleChat}>\n      <div className=\"sidebarChat\">\n        <div className=\"sidebarChat__wrapper\">\n          <Avatar src={messages[0]?.photoURL} />\n          <div className=\"sidebarChat__info\">\n            <h2 className=\"room__name\">{name}</h2>\n            <p className=\"sidebar__lastmessages__color\">\n              <span className=\"sidebar__lastMessageName\">\n                {id != \"\" && messages.length > 0\n                  ? messages[0]?.name + \": \"\n                  : \"Loading: \"}\n              </span>\n              {id != \"\" && messages.length > 0\n                ? messages[0]?.message\n                : \"Start a new chat\"}\n            </p>\n          </div>\n        </div>\n        <div className=\"sidebarChat__delete\" onClick={deleteRoom}>\n          <DeleteIcon />\n        </div>\n      </div>\n    </Link>\n  ) : (\n    <div onClick={createChat} className=\"sidebarChat addnew__chat\">\n      <h2>Add New Room</h2>\n      <div className=\"addicon\">\n        <AddCircleIcon />\n      </div>\n    </div>\n  );\n}\n\nexport default SidebarChat;\n","export const password = \"12345\"; // enter your password here to deleet the room\n","import { useState, useEffect } from \"react\";\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n}\n\nexport default function UseWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions()\n  );\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Avatar, Collapse, IconButton } from \"@material-ui/core\";\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\nimport ChatIcon from \"@material-ui/icons/Chat\";\nimport SearchOutlined from \"@material-ui/icons/SearchOutlined\";\nimport SidebarChat from \"./SidebarChat\";\nimport \"./Sidebar.css\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport db from \"./firebase\";\nimport { useStateValue } from \"./StateProvider\";\nimport { actionTypes } from \"./reducer\";\nimport UseWindowDimensions from \"./UseWindowDimensions\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\n\nfunction Sidebar() {\n  const [rooms, setRooms] = useState([]);\n  const [toggler, setToggler] = useState(false);\n  const [sidebarBool, setsidebarBool] = useState(true);\n  const [{ togglerState }, dispatch] = useStateValue();\n  const [search, setSearch] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [logout, setLogout] = useState(false);\n  const { width } = UseWindowDimensions();\n  const matcher = (s, values) => {\n    const re = RegExp(`.*${s.toLowerCase().split(\"\").join(\".*\")}.*`);\n    return values.filter((v) => v.data.name.toLowerCase().match(re));\n  };\n  const handleChange = (e) => {\n    setsidebarBool(false);\n    setInput(e.target.value);\n  };\n  const exitApp = () => {\n    localStorage.removeItem(\"uid\");\n    window.location.reload();\n    setLogout(true);\n  };\n  useEffect(() => {\n    if (rooms.length > 0) {\n      setSearch(matcher(input, rooms));\n    }\n    if (input === \"\") {\n      setsidebarBool(true);\n    }\n  }, [input]);\n\n  useEffect(() => {\n    const unsubscribe = db\n      .collection(\"rooms\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) => {\n        setRooms(\n          snapshot.docs.map((doc) => ({\n            id: doc.id,\n            data: doc.data(),\n          }))\n        );\n      });\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  useEffect(() => {\n    setToggler(!toggler);\n  }, [togglerState]);\n  const handleDrawerToggle = () => {\n    setToggler(toggler);\n\n    dispatch({\n      type: actionTypes.SET_TOGGLER,\n      togglerState: togglerState + 1,\n    });\n  };\n  const photoURL =\n    localStorage.getItem(\"photoURL\") !== \"\"\n      ? localStorage.getItem(\"photoURL\")\n      : null;\n  const displayName = localStorage.getItem(\"displayName\");\n\n  return (\n    <>\n      {width < 629 ? (\n        <div\n          className={\n            togglerState % 2 !== 0 ? \"sidebar\" : \"sidebar hide__sidebar\"\n          }\n        >\n          <div className=\"siderbar__wrapper\">\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              edge=\"start\"\n              className=\"sidebar__burger\"\n              onClick={handleDrawerToggle}\n            >\n              <MenuIcon />\n            </IconButton>\n            <div className=\"sidebar__header\">\n              <Avatar src={photoURL} />{\" \"}\n              <div className=\"sidebar__headerRight\">\n                <h2 style={{color:\"white\"}}>{displayName}</h2>\n                <IconButton>\n                  <div onClick={exitApp}>\n                    <ExitToAppIcon />\n                  </div>\n                </IconButton>\n              </div>\n            </div>\n          </div>\n          <div className=\"sidebar__search\">\n            <div className=\"sidebar__searchContainer\">\n              <SearchOutlined />\n              <input\n                placeholder=\"Search or Start a new chat\"\n                value={input}\n                type=\"text\"\n                onChange={handleChange}\n              />\n            </div>\n          </div>\n          {sidebarBool ? (\n            <div className=\"sidebar__chats\">\n              <SidebarChat addNewChatVal=\"true\" />\n              {rooms.map((room) => (\n                <SidebarChat key={room.id} id={room.id} name={room.data.name} />\n              ))}\n            </div>\n          ) : (\n            <div className=\"sidebar__chats\">\n              <SidebarChat addNewChatVal=\"true\" />\n              {search.map((room) => (\n                <SidebarChat key={room.id} id={room.id} name={room.data.name} />\n              ))}\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className={\"sidebar\"}>\n          <div className=\"sidebar__header\">\n            <Avatar src={photoURL} />\n            <div className=\"sidebar__headerRight\">\n            <h2>{displayName}</h2>\n              <IconButton>\n                <div onClick={exitApp}>\n                  <ExitToAppIcon />\n                </div>\n              </IconButton>\n            </div>\n          </div>\n          <div className=\"sidebar__search\">\n            <div className=\"sidebar__searchContainer\">\n              <SearchOutlined />\n              <input\n                placeholder=\"Search or Start a new chat\"\n                value={input}\n                type=\"text\"\n                onChange={handleChange}\n              />\n            </div>\n          </div>\n          {sidebarBool ? (\n            <div className=\"sidebar__chats scrollbar-juicy-peach\">\n              <SidebarChat addNewChatVal=\"true\" />\n              {rooms.length == 0 ? (\n                <h1></h1>\n              ) : (\n                rooms.map((room) => (\n                  <SidebarChat\n                    key={room.id}\n                    id={room.id}\n                    name={room.data.name}\n                  />\n                ))\n              )}\n            </div>\n          ) : (\n            <div className=\"sidebar__chats \">\n              <SidebarChat addNewChatVal=\"true\" />\n              {search.map((room) => (\n                <SidebarChat key={room.id} id={room.id} name={room.data.name} />\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default Sidebar;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { Avatar, IconButton } from \"@material-ui/core\";\nimport AttachFile from \"@material-ui/icons/AttachFile\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport SearchOutlined from \"@material-ui/icons/SearchOutlined\";\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\nimport MicIcon from \"@material-ui/icons/Mic\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\nimport db from \"./firebase\";\nimport firebase from \"firebase\";\nimport \"./Chat.css\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useStateValue } from \"./StateProvider\";\nimport { actionTypes } from \"./reducer\";\nimport UseWindowDimensions from \"./UseWindowDimensions\";\nimport useSound from \"use-sound\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport { Picker } from \"emoji-mart\";\nimport Linkify from \"react-linkify\";\n\nfunction Chat() {\n  const [seed, setSeed] = useState(\"\");\n  const [input, setInput] = useState(\"\");\n  const { roomId } = useParams();\n  const [roomName, setRoomName] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [toggler, setToggler] = useState(true);\n  const displayName = localStorage.getItem(\"displayName\");\n  const [{ togglerState }, dispatch] = useStateValue();\n  const [{ photoURL }] = useStateValue();\n  const [emoji, setEmoji] = useState(false);\n  const [issendChecked, setIssendChecked] = useState(false);\n  const [datewise, setDateWise] = useState([]);\n  const [clientGMT, setClinetGMT] = useState(\"\");\n  const [lastseenPhoto, setLastseen] = useState(\"\");\n  // const [isRecChecked, setIsRecChecked]=useState(1);\n  const { width } = UseWindowDimensions();\n  var hour = 0,\n    extramin = 0,\n    minutes = 0,\n    hourly = 0,\n    GMTminutes = String(clientGMT).slice(4, 6),\n    scrl,\n    fix = 0;\n  // console.log(GMTminutes)\n\n  //console.log(roomId);\n\n  const [playOn] = useSound(`${process.env.PUBLIC_URL}/send.mp3`, {\n    volume: 0.5,\n  });\n  const [playOff] = useSound(`${process.env.PUBLIC_URL}/send.mp3`, {\n    volume: 0.5,\n  });\n\n  const addEmoji = (e) => {\n    let emoji = e.native;\n    setInput(input + emoji);\n  };\n  const checkEmojiClose = () => {\n    if (emoji) {\n      setEmoji(false);\n    }\n  };\n  //console.log(photoURL);\n  // console.log(messages);\n  function getTimeZone() {\n    var offset = new Date().getTimezoneOffset(),\n      o = Math.abs(offset);\n    return (\n      (offset < 0 ? \"+\" : \"-\") +\n      (\"00\" + Math.floor(o / 60)).slice(-2) +\n      \":\" +\n      (\"00\" + (o % 60)).slice(-2)\n    );\n  }\n  useEffect(() => {\n    setClinetGMT(getTimeZone());\n    //  console.log(clientGMT);\n  });\n  useEffect(() => {\n    setSeed(Math.floor(Math.random() * 5000));\n    if (roomId) {\n      db.collection(\"rooms\")\n        .doc(roomId)\n        .onSnapshot((snapshot) => {\n          setRoomName(snapshot.data().name);\n        });\n\n      db.collection(\"rooms\")\n        .doc(roomId)\n        .collection(\"messages\")\n        .orderBy(\"timestamp\", \"asc\")\n        .onSnapshot((snapshot) => {\n          setMessages(snapshot.docs.map((doc) => doc.data()));\n        });\n    }\n  }, [roomId]);\n  useEffect(() => {\n    setLastseen(messages[messages.length - 1]?.photoURL);\n  }, [messages]);\n\n  //  console.log(lastseenPhoto);\n\n  const sendMessage = (e) => {\n    e.preventDefault();\n    // console.log(\"You Typedd >>>>\",input);\n    if (input.length > 0) {\n      db.collection(\"rooms\")\n        .doc(roomId)\n        .collection(\"messages\")\n        .add({\n          message: input,\n          name: displayName,\n          timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n          photoURL: localStorage.getItem(\"photoURL\"),\n        });\n      setIssendChecked(!issendChecked);\n      issendChecked ? playOff() : playOn();\n      setInput(\"\");\n    }\n  };\n\n  // for deletion in future\n\n  // let collectionRef = fs.collection(\"rooms\");\n  // collectionRef.where(\"name\", \"==\", name)\n  // .get()\n  // .then(querySnapshot => {\n  // querySnapshot.forEach((doc) => {\n  //     doc.ref.delete().then(() => {\n  //     console.log(\"Document successfully deleted!\");\n  //     }).catch(function(error) {\n  //     console.error(\"Error removing document: \", error);\n  //     });\n  // });\n  // })\n  // .catch(function(error) {\n  // console.log(\"Error getting documents: \", error);\n  // });\n\n  let blankObj = {};\n  let TotalObj = [];\n  if (messages.length > 0) {\n    // for( const message in messages){\n\n    // }\n    let checkDate = \"\";\n    let blankArray = [];\n    let dateArray = [];\n    messages.forEach(function (message, i) {\n      let messageDate = String(\n        new Date(message.timestamp?.toDate()).toUTCString()\n      ).slice(5, 12);\n      if (dateArray.indexOf(messageDate) === -1) {\n        dateArray.push(messageDate);\n      }\n    });\n    //let tempObj={};\n    var index = 0;\n    messages.forEach(function (message, i) {\n      let messageDate = String(\n        new Date(message.timestamp?.toDate()).toUTCString()\n      ).slice(5, 12);\n      // console.log((message.timestamp+new Date()?.getTimezoneOffset()))\n      if (messageDate === dateArray[index] && i == messages.length - 1) {\n        blankArray.push({\n          messageData: message.message,\n          name: message.name,\n          timestamp: message.timestamp,\n        });\n        blankObj[dateArray[index]] = blankArray;\n        TotalObj.push(blankObj);\n        blankObj = {};\n        blankArray = [];\n        blankArray.push({\n          messageData: message.message,\n          name: message.name,\n          timestamp: message.timestamp,\n        });\n        index = index + 1;\n      } else if (messageDate == dateArray[index]) {\n        blankArray.push({\n          messageData: message.message,\n          name: message.name,\n          timestamp: message.timestamp,\n        });\n      } else {\n        blankObj[dateArray[index]] = blankArray;\n        TotalObj.push(blankObj);\n        blankObj = {};\n        blankArray = [];\n        blankArray.push({\n          messageData: message.message,\n          name: message.name,\n          timestamp: message.timestamp,\n        });\n        if (messageDate != dateArray[index] && i == messages.length - 1) {\n          blankObj[messageDate] = blankArray;\n          TotalObj.push(blankObj);\n        }\n        index = index + 1;\n      }\n    });\n  }\n  useEffect(() => {\n    setDateWise(TotalObj);\n  }, [messages]);\n  //  console.log(TotalObj);\n  // if(Object.keys(datewise).length !== 0){\n  //     Object.entries(datewise).forEach(\n  //         ([key, value]) => {\n  //             console.log(key);\n  //             value.forEach((item,i)=>{\n  //                 console.log(item.messageData,item.name);\n  //             });\n  //         }\n  //     );\n  // }\n\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n    // console.log('called')\n  };\n  useEffect(() => {\n    scrollToBottom();\n  });\n\n  useEffect(() => {\n    setToggler(!toggler);\n  }, [togglerState]);\n\n  useEffect(() => {\n    scrollToBottom();\n    //   scrl= document.getElementById(\"chat__box\")\n    //  console.log(messagesEndRef.current.clientHeight);\n    //  scrl.scrollIntoView(false);\n  }, [messages]);\n  const handleDrawerToggle = () => {\n    setToggler(!toggler);\n    dispatch({\n      type: actionTypes.SET_TOGGLER,\n      togglerState: togglerState + 1,\n    });\n  };\n  return (\n    <>\n      {width < 629 ? (\n        <div className={togglerState % 2 === 0 ? \"chat\" : \"chat hide__chat\"}>\n          <div className=\"chat__header\">\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              edge=\"start\"\n              onClick={handleDrawerToggle}\n            >\n              <ArrowBackIcon />\n            </IconButton>\n            <Avatar src={lastseenPhoto} />\n            <div className=\"chat__headerInfo\">\n              <h3>{roomName}</h3>\n              <p className=\"header__lastSeen\">\n                \n                {messages.length !== 0\n                  ? messages[messages.length - 1].timestamp\n                      ?.toDate()\n                      .toUTCString()\n                  : \"\"}\n              </p>\n            </div>\n            <div className=\"chat__headerRight\">\n              <IconButton>\n                <SearchOutlined />\n              </IconButton>\n              <IconButton>\n                <AttachFile />\n              </IconButton>\n              <IconButton>\n                <MoreVertIcon />\n              </IconButton>\n            </div>\n          </div>\n          <div className=\"chat__header__absolute\">\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              edge=\"start\"\n              onClick={handleDrawerToggle}\n            >\n              <ArrowBackIcon />\n            </IconButton>\n            <Avatar src={lastseenPhoto} />\n            <div className=\"chat__headerInfo\">\n              <h3>{roomName}</h3>\n              <p className=\"header__lastSeen\">\n                \n                {messages.length !== 0\n                  ? String(\n                      messages[messages.length - 1].timestamp\n                        ?.toDate()\n                        .toUTCString()\n                    ).slice(0, 22)\n                  : \"\"}\n              </p>\n            </div>\n            <div className=\"chat__headerRight\">\n              <IconButton>\n                <SearchOutlined />\n              </IconButton>\n              <IconButton>\n                <AttachFile />\n              </IconButton>\n              <IconButton>\n                <MoreVertIcon />\n              </IconButton>\n            </div>\n          </div>\n          <div className=\"chat__body\">\n            {datewise.length > 0\n              ? datewise.map(\n                  (item, i) =>\n                    //  <div className=\"chat__body__daystamp\">\n                    //     <p className=\"chat__body__daystamp__title\">{Object.keys(item)}</p>\n                    //  </div>\n                    item[Object.keys(item)].map((e, i) =>\n                      i == 0 ? (\n                        <>\n                          {String(Object.keys(item)).slice(0, 2) !== \"id\" &&\n                          parseInt(String(Object.keys(item)).slice(0, 2)) ? (\n                            <div className=\"chat__body__daystamp\">\n                              <p className=\"chat__body__daystamp__title\">\n                                {parseInt(\n                                  String(Object.keys(item)).slice(0, 2)\n                                ) == parseInt(String(new Date().getDate()))\n                                  ? \"TODAY\"\n                                  : Object.keys(item)}\n                              </p>\n                            </div>\n                          ) : null}\n                          <p\n                            className={`chat__messages ${\n                              e.name === displayName && \"chat__reciever\"\n                            }`}\n                          >\n                            <span className=\"chat__name\">\n                              {e.name}\n                            </span>\n                            <Linkify>{e.messageData}</Linkify>\n                            <span className=\"chat__timestamp\">\n                              <div className=\"hidden\">\n                                {\n                                  (extramin =\n                                    parseInt(\n                                      String(\n                                        new Date(\n                                          e.timestamp?.toDate()\n                                        ).toUTCString()\n                                      ).slice(20, 22)\n                                    ) +\n                                      parseInt(GMTminutes) >\n                                    60\n                                      ? (parseInt(\n                                          String(\n                                            new Date(\n                                              e.timestamp?.toDate()\n                                            ).toUTCString()\n                                          ).slice(20, 22)\n                                        ) +\n                                          parseInt(GMTminutes)) %\n                                        60\n                                      : 0)\n                                }\n\n                                {\n                                  (minutes =\n                                    parseInt(\n                                      String(\n                                        new Date(\n                                          e.timestamp?.toDate()\n                                        ).toUTCString()\n                                      ).slice(20, 22)\n                                    ) +\n                                      parseInt(GMTminutes) +\n                                      extramin -\n                                      fix >\n                                    60\n                                      ? (parseInt(\n                                          String(\n                                            new Date(\n                                              e.timestamp?.toDate()\n                                            ).toUTCString()\n                                          ).slice(20, 22)\n                                        ) +\n                                          parseInt(GMTminutes) +\n                                          extramin -\n                                          fix) %\n                                        60\n                                      : parseInt(\n                                          String(\n                                            new Date(\n                                              e.timestamp?.toDate()\n                                            ).toUTCString()\n                                          ).slice(20, 22)\n                                        ) +\n                                        parseInt(GMTminutes) +\n                                        extramin -\n                                        fix)\n                                }\n                                {(hour = extramin > 0 ? 1 : 0)}\n\n                                {\n                                  (hourly =\n                                    parseInt(\n                                      String(\n                                        new Date(\n                                          e.timestamp?.toDate()\n                                        ).toUTCString()\n                                      ).slice(17, 19)\n                                    ) +\n                                      hour +\n                                      parseInt(clientGMT) >\n                                    24\n                                      ? (parseInt(\n                                          String(\n                                            new Date(\n                                              e.timestamp?.toDate()\n                                            ).toUTCString()\n                                          ).slice(17, 19)\n                                        ) +\n                                          hour +\n                                          parseInt(clientGMT)) %\n                                        24\n                                      : parseInt(\n                                          String(\n                                            new Date(\n                                              e.timestamp?.toDate()\n                                            ).toUTCString()\n                                          ).slice(17, 19)\n                                        ) +\n                                        hour +\n                                        parseInt(clientGMT))\n                                }\n                              </div>\n                              {hourly ? hourly % 12 : \"00\"}\n                              {\" : \"}\n                              {minutes !== 0\n                                ? minutes < 10\n                                  ? \"0\" + minutes\n                                  : minutes\n                                : \"00\"}\n                              {hourly > 12 ? \" PM\" : \" AM\"}\n                            </span>\n                          </p>\n                        </>\n                      ) : (\n                        <p\n                          className={`chat__messages ${\n                            e.name === displayName && \"chat__reciever\"\n                          }`}\n                        >\n                          <span className=\"chat__name\">\n                            {e.name}\n                          </span>\n                          <Linkify>{e.messageData}</Linkify>\n                          <span className=\"chat__timestamp\">\n                            <div className=\"hidden\">\n                              {\n                                (extramin =\n                                  parseInt(\n                                    String(\n                                      new Date(\n                                        e.timestamp?.toDate()\n                                      ).toUTCString()\n                                    ).slice(20, 22)\n                                  ) +\n                                    parseInt(GMTminutes) >\n                                  60\n                                    ? (parseInt(\n                                        String(\n                                          new Date(\n                                            e.timestamp?.toDate()\n                                          ).toUTCString()\n                                        ).slice(20, 22)\n                                      ) +\n                                        parseInt(GMTminutes)) %\n                                      60\n                                    : 0)\n                              }\n\n                              {\n                                (minutes =\n                                  parseInt(\n                                    String(\n                                      new Date(\n                                        e.timestamp?.toDate()\n                                      ).toUTCString()\n                                    ).slice(20, 22)\n                                  ) +\n                                    parseInt(GMTminutes) +\n                                    extramin -\n                                    fix >\n                                  60\n                                    ? (parseInt(\n                                        String(\n                                          new Date(\n                                            e.timestamp?.toDate()\n                                          ).toUTCString()\n                                        ).slice(20, 22)\n                                      ) +\n                                        parseInt(GMTminutes) +\n                                        extramin -\n                                        fix) %\n                                      60\n                                    : parseInt(\n                                        String(\n                                          new Date(\n                                            e.timestamp?.toDate()\n                                          ).toUTCString()\n                                        ).slice(20, 22)\n                                      ) +\n                                      parseInt(GMTminutes) +\n                                      extramin -\n                                      fix)\n                              }\n                              {(hour = extramin > 0 ? 1 : 0)}\n\n                              {\n                                (hourly =\n                                  parseInt(\n                                    String(\n                                      new Date(\n                                        e.timestamp?.toDate()\n                                      ).toUTCString()\n                                    ).slice(17, 19)\n                                  ) +\n                                    hour +\n                                    parseInt(clientGMT) >\n                                  24\n                                    ? (parseInt(\n                                        String(\n                                          new Date(\n                                            e.timestamp?.toDate()\n                                          ).toUTCString()\n                                        ).slice(17, 19)\n                                      ) +\n                                        hour +\n                                        parseInt(clientGMT)) %\n                                      24\n                                    : parseInt(\n                                        String(\n                                          new Date(\n                                            e.timestamp?.toDate()\n                                          ).toUTCString()\n                                        ).slice(17, 19)\n                                      ) +\n                                      hour +\n                                      parseInt(clientGMT))\n                              }\n                            </div>\n                            {hourly ? hourly % 12 : \"00\"}\n                            {\" : \"}\n                            {minutes !== 0\n                              ? minutes < 10\n                                ? \"0\" + minutes\n                                : minutes\n                              : \"00\"}\n                            {hourly > 12 ? \" PM\" : \" AM\"}\n                          </span>\n                        </p>\n                      )\n                    )\n                  //  console.log(Object.keys(item))\n                  // console.log(item[Object.keys(item)])\n                )\n              : // <div className=\"chat__body__daystamp\">\n                //     <p className=\"chat__body__daystamp__title\"></p>\n                //  </div>\n                // Object.entries(datewise).forEach(\n                //     ([key, value]) => {\n\n                //     {\n                //     value.forEach((item,i)=>{\n                //             console.log(item.messageData,item.name)\n                //         })\n                //     }\n                // }\n                // )\n\n                null}\n            <div ref={messagesEndRef}></div>\n          </div>\n\n          <div className=\"chat__footer\">\n  \n            <IconButton>\n              <InsertEmoticonIcon\n                className=\"yellow\"\n                onClick={() => setEmoji(!emoji)}\n              />\n              {emoji ? <Picker onSelect={addEmoji} /> : null}\n            </IconButton>\n\n            <form>\n              <input\n                value={input}\n                type=\"text\"\n                placeholder=\"Type a message\"\n                onChange={(e) => setInput(e.target.value)}\n                onClick={checkEmojiClose}\n                disabled={\n                  roomName === \"Admin: Abhilash\"\n                    ? (displayName == \"Abhilash Khuntia\" ? true : false)\n                      ? false\n                      : true\n                    : false\n                }\n              />\n              <button type=\"submit\" onClick={sendMessage}>\n                Send A message\n              </button>\n            </form>\n          </div>\n\n          <div className=\"chat__footer__absolute\">\n            <IconButton>\n              <InsertEmoticonIcon />\n            </IconButton>\n            <form>\n              <input\n                value={input}\n                type=\"text\"\n                placeholder=\"Type a message\"\n                onChange={(e) => setInput(e.target.value)}\n                disabled={roomName == \"Admin: Abhilash\" ? true : false}\n              />\n              <button type=\"submit\" onClick={sendMessage}>\n                Send A message\n              </button>\n            </form>\n          </div>\n        </div>\n      ) : (\n        <div className={\"chat\"}>\n          <div className=\"chat__header\">\n            <Avatar src={lastseenPhoto} />\n            <div className=\"chat__headerInfo\">\n              <h3>{roomName}</h3>\n              <p className=\"header__lastSeen\">\n                \n                {messages.length !== 0\n                  ? String(\n                      messages[messages.length - 1].timestamp\n                        ?.toDate()\n                        .toUTCString()\n                    ).slice(0, 22)\n                  : \"\"}\n              </p>\n            </div>\n            <div className=\"chat__headerRight\">\n              <IconButton>\n                <SearchOutlined />\n              </IconButton>\n              <IconButton>\n                <AttachFile />\n              </IconButton>\n              <IconButton>\n                <MoreVertIcon />\n              </IconButton>\n            </div>\n          </div>\n          <div\n            className=\"chat__body scrollbar-juicy-peach\"\n            onClick={checkEmojiClose}\n          >\n            {datewise.length > 0\n              ? datewise.map(\n                  (item, i) =>\n                    item[Object.keys(item)].map((e, i) =>\n                      i == 0 ? (\n                        <>\n                          {String(Object.keys(item))?.slice(0, 2) !== \"id\" &&\n                          Object.keys(item) != undefined ? (\n                            <div className=\"chat__body__daystamp\">\n                              <p className=\"chat__body__daystamp__title\">\n                                {parseInt(\n                                  String(Object.keys(item)).slice(0, 2)\n                                ) == parseInt(String(new Date().getDate()))\n                                  ? \"TODAY\"\n                                  : Object.keys(item)}\n                              </p>\n                            </div>\n                          ) : (\n                            \"\"\n                          )}\n                          <p\n                            className={`chat__messages ${\n                              e.name === displayName && \"chat__reciever\"\n                            }`}\n                          >\n                            <span className=\"chat__name\">\n                              {e.name}\n                            </span>\n                            <Linkify\n                              properties={{\n                                target: \"_blank\",\n                                style: { color: \"red\", fontWeight: \"bold\" },\n                              }}\n                            >\n                              {e.messageData}\n                            </Linkify>\n                            <span className=\"chat__timestamp\">\n                              <div className=\"hidden\">\n                                {\n                                  (extramin =\n                                    parseInt(\n                                      String(\n                                        new Date(\n                                          e.timestamp?.toDate()\n                                        ).toUTCString()\n                                      ).slice(20, 22)\n                                    ) +\n                                      parseInt(GMTminutes) >\n                                    60\n                                      ? (parseInt(\n                                          String(\n                                            new Date(\n                                              e.timestamp?.toDate()\n                                            ).toUTCString()\n                                          ).slice(20, 22)\n                                        ) +\n                                          parseInt(GMTminutes)) %\n                                        60\n                                      : 0)\n                                }\n\n                                {\n                                  (minutes =\n                                    parseInt(\n                                      String(\n                                        new Date(\n                                          e.timestamp?.toDate()\n                                        ).toUTCString()\n                                      ).slice(20, 22)\n                                    ) +\n                                      parseInt(GMTminutes) +\n                                      extramin -\n                                      fix >\n                                    60\n                                      ? (parseInt(\n                                          String(\n                                            new Date(\n                                              e.timestamp?.toDate()\n                                            ).toUTCString()\n                                          ).slice(20, 22)\n                                        ) +\n                                          parseInt(GMTminutes) +\n                                          extramin -\n                                          fix) %\n                                        60\n                                      : parseInt(\n                                          String(\n                                            new Date(\n                                              e.timestamp?.toDate()\n                                            ).toUTCString()\n                                          ).slice(20, 22)\n                                        ) +\n                                        parseInt(GMTminutes) +\n                                        extramin -\n                                        fix)\n                                }\n                                {(hour = extramin > 0 ? 1 : 0)}\n\n                                {\n                                  (hourly =\n                                    parseInt(\n                                      String(\n                                        new Date(\n                                          e.timestamp?.toDate()\n                                        ).toUTCString()\n                                      ).slice(17, 19)\n                                    ) +\n                                      hour +\n                                      parseInt(clientGMT) >\n                                    24\n                                      ? (parseInt(\n                                          String(\n                                            new Date(\n                                              e.timestamp?.toDate()\n                                            ).toUTCString()\n                                          ).slice(17, 19)\n                                        ) +\n                                          hour +\n                                          parseInt(clientGMT)) %\n                                        24\n                                      : parseInt(\n                                          String(\n                                            new Date(\n                                              e.timestamp?.toDate()\n                                            ).toUTCString()\n                                          ).slice(17, 19)\n                                        ) +\n                                        hour +\n                                        parseInt(clientGMT))\n                                }\n                              </div>\n                              {hourly ? hourly % 12 : \"00\"}\n                              {\" : \"}\n                              {minutes !== 0\n                                ? minutes < 10\n                                  ? \"0\" + minutes\n                                  : minutes\n                                : \"00\"}\n                              {hourly > 12 ? \" PM\" : \" AM\"}\n                            </span>\n                          </p>\n                        </>\n                      ) : (\n                        <p\n                          className={`chat__messages ${\n                            e.name === displayName && \"chat__reciever\"\n                          }`}\n                        >\n                          <span className=\"chat__name\">\n                            {e.name}\n                          </span>\n                          <Linkify>{e.messageData}</Linkify>\n                          <span className=\"chat__timestamp\">\n                            <div className=\"hidden\">\n                              {\n                                (extramin =\n                                  parseInt(\n                                    String(\n                                      new Date(\n                                        e.timestamp?.toDate()\n                                      ).toUTCString()\n                                    ).slice(20, 22)\n                                  ) +\n                                    parseInt(GMTminutes) >\n                                  60\n                                    ? (parseInt(\n                                        String(\n                                          new Date(\n                                            e.timestamp?.toDate()\n                                          ).toUTCString()\n                                        ).slice(20, 22)\n                                      ) +\n                                        parseInt(GMTminutes)) %\n                                      60\n                                    : 0)\n                              }\n\n                              {\n                                (minutes =\n                                  parseInt(\n                                    String(\n                                      new Date(\n                                        e.timestamp?.toDate()\n                                      ).toUTCString()\n                                    ).slice(20, 22)\n                                  ) +\n                                    parseInt(GMTminutes) +\n                                    extramin -\n                                    fix >\n                                  60\n                                    ? (parseInt(\n                                        String(\n                                          new Date(\n                                            e.timestamp?.toDate()\n                                          ).toUTCString()\n                                        ).slice(20, 22)\n                                      ) +\n                                        parseInt(GMTminutes) +\n                                        extramin -\n                                        fix) %\n                                      60\n                                    : parseInt(\n                                        String(\n                                          new Date(\n                                            e.timestamp?.toDate()\n                                          ).toUTCString()\n                                        ).slice(20, 22)\n                                      ) +\n                                      parseInt(GMTminutes) +\n                                      extramin -\n                                      fix)\n                              }\n                              {(hour = extramin > 0 ? 1 : 0)}\n\n                              {\n                                (hourly =\n                                  parseInt(\n                                    String(\n                                      new Date(\n                                        e.timestamp?.toDate()\n                                      ).toUTCString()\n                                    ).slice(17, 19)\n                                  ) +\n                                    hour +\n                                    parseInt(clientGMT) >\n                                  24\n                                    ? (parseInt(\n                                        String(\n                                          new Date(\n                                            e.timestamp?.toDate()\n                                          ).toUTCString()\n                                        ).slice(17, 19)\n                                      ) +\n                                        hour +\n                                        parseInt(clientGMT)) %\n                                      24\n                                    : parseInt(\n                                        String(\n                                          new Date(\n                                            e.timestamp?.toDate()\n                                          ).toUTCString()\n                                        ).slice(17, 19)\n                                      ) +\n                                      hour +\n                                      parseInt(clientGMT))\n                              }\n                            </div>\n                            {hourly ? hourly % 12 : \"00\"}\n                            {\" : \"}\n                            {minutes !== 0\n                              ? minutes < 10\n                                ? \"0\" + minutes\n                                : minutes\n                              : \"00\"}\n                            {hourly > 12 ? \" PM\" : \" AM\"}\n                          </span>\n                        </p>\n                      )\n                    )\n                  //  console.log(Object.keys(item))\n                  // console.log(item[Object.keys(item)])\n                )\n              : // <div className=\"chat__body__daystamp\">\n                //     <p className=\"chat__body__daystamp__title\"></p>\n                //  </div>\n                // Object.entries(datewise).forEach(\n                //     ([key, value]) => {\n\n                //     {\n                //     value.forEach((item,i)=>{\n                //             console.log(item.messageData,item.name)\n                //         })\n                //     }\n                // }\n                // )\n\n                null}\n            <div ref={messagesEndRef} id=\"chat__box\"></div>\n          </div>\n\n          <div className=\"chat__footer\">\n            <IconButton>\n              {/* <InsertEmoticonIcon /> */}\n              <InsertEmoticonIcon\n                className=\"yellow\"\n                onClick={() => setEmoji(!emoji)}\n              />\n              {emoji ? <Picker onSelect={addEmoji} /> : null}\n            </IconButton>\n            <form>\n              <input\n                value={input}\n                type=\"text\"\n                placeholder=\"Type a message\"\n                onChange={(e) => setInput(e.target.value)}\n                onClick={checkEmojiClose}\n                disabled={\n                  roomName === \"Admin: Abhilash\"\n                    ? (displayName == \"Abhilash Khuntia\" ? true : false)\n                      ? false\n                      : true\n                    : false\n                }\n              />\n              <button type=\"submit\" onClick={sendMessage}>\n                Send A message\n              </button>\n            </form>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default Chat;\n","import React from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport \"./Login.css\";\nimport { auth, provider } from \"./firebase\";\nimport { useStateValue } from \"./StateProvider\";\nimport { actionTypes } from \"./reducer\";\nfunction Login() {\n  const [{}, dispatch] = useStateValue();\n\n  const signIn = () => {\n    auth\n      .signInWithPopup(provider)\n      .then((result) => {\n        console.log(result.user);\n        dispatch({\n          type: actionTypes.SET_USER,\n          user: result.user,\n        });\n        dispatch({\n          type: actionTypes.SET_SESSION,\n          uid: result.user.uid,\n          displayName: result.user.displayName,\n          photoURL: result.user.photoURL,\n        });\n      })\n      .catch((err) => alert(err.message));\n  };\n\n  return (\n    <div className=\"login\">\n      <div className=\"login__container\">\n        <img\n          src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/WhatsApp.svg/225px-WhatsApp.svg.png\"\n          alt=\"whatsapp\"\n        />\n        <div className=\"login__text\">\n          <h1>Sign in to Whatsapp</h1>\n        </div>\n        <Button onClick={signIn}>Sign In with Google</Button>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","import React from \"react\";\nimport \"./App.css\";\nimport Sidebar from \"./Sidebar\";\nimport Chat from \"./Chat\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Login from \"./Login\";\nimport { useStateValue } from \"./StateProvider\";\nimport UseWindowDimensions from \"./UseWindowDimensions\";\n\nfunction App() {\n  const [{ user }, dispatch] = useStateValue();\n  const { width } = UseWindowDimensions();\n  const uid =\n    localStorage.getItem(\"uid\") !== undefined\n      ? localStorage.getItem(\"uid\")\n      : null;\n\n  return (\n    <div className=\"app\">\n      {!user && !uid ? (\n        <Login />\n      ) : (\n        <div className=\"app__body\">\n          <Router>\n            <Sidebar />\n            <Switch>\n              <Route path=\"/rooms/:roomId\">\n                <Chat />\n              </Route>\n              <Route path=\"/\">\n                <Chat />\n              </Route>\n            </Switch>\n          </Router>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport reducer, { initialState } from \"./reducer\";\nimport { StateProvider } from \"./StateProvider\";\n\nReactDOM.render(\n  <StateProvider initialState={initialState} reducer={reducer}>\n    <App />\n  </StateProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}